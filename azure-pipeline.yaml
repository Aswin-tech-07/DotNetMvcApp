trigger:
  branches:
    include:
      - development
      - main

pool:
  name: Default
  vmImage: 'ubuntu-latest'

variables:
  dockerRegistryServiceConnection: 'fa3d828d-33e8-42d6-8e6c-fd1a4cec5263'
  imageRepository: 'aswintechdotnetmvcapp'
  containerRegistry: 'dotnetmvcapp.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  azureConnectionName: 'DotNetMvcAppResourceConnection'
  developmentAppService: 'DotNetMvcAppDev'
  productionAppService: 'DotNetMvcAppProd'

stages:
  - stage: SetupDocker
    jobs:
    - job: InstallDocker
      pool:
        name: Default
        vmImage: 'ubuntu-latest'
      steps:
        - script: |
            # Install Docker
            sudo apt-get update
            sudo apt-get install -y docker.io
            # Start Docker service
            sudo systemctl start docker
            # Enable Docker to start on boot
            sudo systemctl enable docker
            # Check Docker status
            sudo systemctl status docker
          displayName: 'Install Docker and Check Status'
  - stage: Build
    dependsOn: SetupDocker
    jobs:
      - job: BuildDockerImage
        pool:
          name: Default
          vmImage: 'ubuntu-latest'   
        container: 
          image: 'docker:latest'  # Use a Docker image that has Docker CLI
          options: '--privileged'   # Required for Docker-in-Docker
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              command: 'login'
          - task: Docker@2
            displayName: 'Build and Push Docker Image'
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              repository: $(imageRepository)
              command: 'buildAndPush'
              dockerfile: '**/Dockerfile'
              tags: |
                $(Build.BuildId)
              addPipelineData: true



  - stage: DeployToDevelopment
    dependsOn: Build
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/development')
    jobs:
      - job: DeployDevelopment
        steps:
          - task: AzureWebAppContainer@1
            displayName: 'Deploy to Development App Services'
            inputs:
              azureSubscription: $(azureConnectionName)
              appName: $(developmentAppService)
              imageName: $(imageRepository):$(Build.BuildId)
  

  - stage: DeployToProd
    dependsOn: Build
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    jobs:
      - deployment: DeployProduction
        environment: 'Production'   # Reference the environment for approvals
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzureWebAppContainer@1
                displayName: 'Deploy to Production App Services'
                inputs:
                  azureSubscription: $(azureConnectionName)
                  appName: $(productionAppService)
                  imageName: $(imageRepository):$(Build.BuildId)







