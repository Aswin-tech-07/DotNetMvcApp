trigger:
  branches:
    include:
      - development
      - main

pool:
  name: Default
  vmImage: 'windows-latest'

variables:
  dockerRegistryServiceConnection: 'fa3d828d-33e8-42d6-8e6c-fd1a4cec5263'
  imageRepository: 'aswintechdotnetmvcapp'
  containerRegistry: 'dotnetmvcapp.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  azureConnectionName: 'DotNetMvcAppResourceConnection'
  developmentAppService: 'DotNetMvcAppDev'
  productionAppService: 'DotNetMvcAppProd'

stages:
  - stage: SetupDocker
    jobs:
    - job: InstallDocker
      pool:
        name: Default
        vmImage: 'windows-latest'
      steps:
        - powershell: |
            # Check if Docker is already installed
            if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
                # Install Docker
                Install-Package -Name docker -Source DockerMsftProvider -Force
                # Start Docker service
                Start-Service docker
                Write-Host "Docker installed and started."
            } else {
                Write-Host "Docker is already installed."
            }
            # Check Docker status
            Get-Service docker | Select-Object Status
          displayName: 'Install Docker and Check Status'

  - stage: Build
    dependsOn: SetupDocker
    jobs:
      - job: BuildDockerImage
        pool:
          name: Default
          vmImage: 'windows-latest'
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              command: 'login'
          - task: Docker@2
            displayName: 'Build and Push Docker Image'
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              repository: $(imageRepository)
              command: 'buildAndPush'
              dockerfile: '**/Dockerfile'
              tags: |
                $(Build.BuildId)
              addPipelineData: true

  - stage: DeployToDevelopment
    dependsOn: Build
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/development')
    jobs:
      - job: DeployDevelopment
        steps:
          - task: AzureWebAppContainer@1
            displayName: 'Deploy to Development App Services'
            inputs:
              azureSubscription: $(azureConnectionName)
              appName: $(developmentAppService)
              imageName: $(imageRepository):$(Build.BuildId)
  

  - stage: DeployToProd
    dependsOn: Build
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    jobs:
      - deployment: DeployProduction
        environment: 'Production'   # Reference the environment for approvals
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzureWebAppContainer@1
                displayName: 'Deploy to Production App Services'
                inputs:
                  azureSubscription: $(azureConnectionName)
                  appName: $(productionAppService)
                  imageName: $(imageRepository):$(Build.BuildId)







